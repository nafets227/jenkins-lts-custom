---
name: Build with latest Jenkins+Plugins Version

on:
  push:
    branches: 
      - '*'
  schedule:
    - cron: "0 0 * * *"

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0

      - name: Configure Git User Name
        run: |
          git config user.name "JenkinsUpdater[bot]"
          git config user.email "132197+jenkinsupdater[bot]@users.noreply.github.com"

      - name: Find latest Jenkins LTS version
        id: findLatestJenkins
        uses: jenkins-infra/jenkins-version@0.2.0
        with:
          version-identifier: lts

      - name: Define Jenkins Version Docker Tag
        id: defineJenkinsTag
        run: |
          SUFFIX=jdk11
          FULL_VERSION=jenkins/jenkins:${{ steps.findLatestJenkins.outputs.jenkins_version }}-${SUFFIX}
          echo "::set-output name=fullversion::$FULL_VERSION"
          echo "::set-output name=suffix::$SUFFIX"
          echo "$FULL_VERSION"
          sed -i 's|FROM .*|FROM '"${FULL_VERSION}"'|' Dockerfile

      - name: Check if Jenkins Version has changed
        id: diff-jenkins
        run: |
          git diff

          if [[ $(git diff --stat) != '' ]]; then
            echo "::set-output name=changed::true"
          else
            echo "::set-output name=changed::false"
          fi

      - name: Commit Jenkins Version
        if: ${{ steps.diff-jenkins.outputs.changed == 'true' }}
        run: |
          git add Dockerfile
          git commit -m "Bump to Jenkins LTS ${{ steps.findLatestJenkins.outputs.jenkins_version}}"

      - name: Generate Plugins Versions List plugins.txt from plugins-request.txt
        run: |
          set -eo pipefail
          docker run \
            -v $(pwd)/plugins-request.txt:/plugins-request.txt \
            "${{ steps.defineJenkinsTag.outputs.fullversion }}" \
            jenkins-plugin-cli --no-download --list -f /plugins-request.txt \
            | sed -e '1,/Resulting plugin list:/d' -e '$d' -e 's/ /:/' \
            >plugins.txt

      - name: Check if Plugin versions have changed
        id: diff-plugins
        run: |
          git diff

          if [[ $(git diff --stat) != '' ]]; then
            echo "::set-output name=changed::true"
          else
            echo "::set-output name=changed::false"
          fi

      - name: Commit Plugins
        if: ${{ steps.diff-plugins.outputs.changed == 'true' }}
        run: |
          git add plugins.txt
          git commit -m "Update Plugins"

      - name: Git Push
        if: |
          ${{ steps.diff-plugins.outputs.changed == 'true' || 
          steps.diff-jenkins.outputs.changed == 'true' }}
        run: |
          git push

      - name: Check if Build necessary
        id: ifbuild
        run: |
          if \
              [ "${{ steps.diff-plugins.outputs.changed }}" != 'true' ] &&
              [ "${{ steps.diff-jenkins.outputs.changed }}" != 'true' ] &&
              [ "${{Â github.event_name }}" != "push" ] ; then
            echo "nothing changed -> skip build"
            echo "::set-output name=build::false"
          elif [ "${{ github.ref }}" == 'refs/heads/main' ] ; then
            echo "Building on main branch -> push with version+date"
            VERTAG="r"
            VERTAG+="$(git rev-list --count HEAD)"
            VERTAG+="."
            VERTAG+="$(git rev-parse --short HEAD)"
            echo "::set-output name=build::true"
            echo "::set-output name=tags::$VERTAG-$(date '+%Y%m%d%H%M')"
            echo "::set-output name=latest::true"
          elif [ "${GITHUB_REF#refs/heads/}" != "$GITHUB_REF" ] ; then
            echo "Building on non-main branch -> push with branchname"
            VERTAG="${GITHUB_REF#refs/heads/}"
            echo "::set-output name=build::true"
            echo "::set-output name=tags::$VERTAG"
            echo "::set-output name=latest::false"
          else
            echo "not building on a branch -> dont push"
            echo "::set-output name=build::true"
            echo "::set-output name=tags::"
            echo "::set-output name=latest::false"
          fi

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        if: ${{ steps.ifbuild.outputs.build == 'true' }}
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: |
            latest=${{ steps.ifbuild.outputs.latest }}
            prefix=
            suffix=-${{ steps.defineJenkinsTag.outputs.suffix }}
          tags: |
            ${{ steps.ifbuild.outputs.tags }}

      - name: Log into registry ghcr.io
        if: ${{ steps.ifbuild.outputs.build == 'true' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        if: ${{ steps.ifbuild.outputs.build == 'true' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
