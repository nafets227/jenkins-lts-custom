---
name: Build with latest Jenkins+Plugins Version

concurrency: jenkins-lts-custom

on:
  push:
    branches:
      - '*'
  schedule:
    - cron: "0 0 * * *"

jobs:
  jenkins-lts-custom:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Configure Git User Name
        run: |
          git config user.name "JenkinsUpdater[bot]"
          git config user.email "132197+jenkinsupdater[bot]@users.noreply.github.com"

      # setup build machine by installing yq
      # important to install from pip3, since preinstalled
      # is another implementation of yq that is incompatible.
      - name: Install yq
        run: "pip3 install yq"

      - name: Test autoupdate
        run: test/test

      - name: Auto Update our components
        id: autoupdate
        run: |
          set -x
          if [ "${{ github.event_name }}" == 'push' ] ; then
            parm="--force"
          elif [ "${{ github.event_name }}" == 'schedule' ] ; then
            parm=""
          else
            printf "Invalid event_name %s\n" "${{ github.event_name }}"
            exit 1
          fi
          .github/workflows/autoupdate.sh $parm &&
          git push origin "$GITHUB_REF"

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        if: ${{ steps.autoupdate.outputs.newVersion != '' }}
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}
          tags: |
            type=raw,${{ steps.autoupdate.outputs.newVersion }}

      - name: Log into registry ghcr.io
        if: ${{ steps.autoupdate.outputs.newVersion != '' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        if: ${{ steps.autoupdate.outputs.newVersion != '' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set up Helm
        if: ${{ steps.autoupdate.outputs.newVersion != '' }}
        uses: azure/setup-helm@v3.4

      - uses: actions/setup-python@v4
        if: ${{ steps.autoupdate.outputs.newVersion != '' }}
        with:
          python-version: "3.10"

      - name: Set up chart-testing
        if: ${{ steps.autoupdate.outputs.newVersion != '' }}
        uses: helm/chart-testing-action@v2.3.1

      - name: Run chart-testing (lint)
        if: ${{ steps.autoupdate.outputs.newVersion != '' }}
        run: ct lint --all

      - name: Create kind cluster
        if: ${{ steps.autoupdate.outputs.newVersion != '' }}
        uses: helm/kind-action@v1.4.0

      - name: Run chart-testing (install)
        if: ${{ steps.autoupdate.outputs.newVersion != '' }}
        run: ct install --all

      - name: Publish chart
        if: ${{ steps.autoupdate.outputs.newVersion != '' }}
        run: |
          set -x
          rm -rf .cr-release-packages .cr-index # ignore error!
          .github/workflows/setup-chart-releaser.sh &&
          mkdir -p .cr-release-packages .cr-index &&
          cr package \
            charts/jenkins-lts-custom \
            --package-path .cr-release-packages \
            &&
          cr upload \
            -o ${GITHUB_REPOSITORY%%/*} \
            -r ${GITHUB_REPOSITORY##*/} \
            -t "${{ secrets.GITHUB_TOKEN }}" \
            -c "$(git rev-parse HEAD)" \
            --release-name-template "v{{ .Version }}" \
            &&
          cr index \
            -o ${GITHUB_REPOSITORY%%/*} \
            -r ${GITHUB_REPOSITORY##*/} \
            -c "https:/github.com/nafets227/jenkins-lts-custom" \
            --release-name-template "v{{ .Version }}" \
            --push
