---
name: Build with latest Jenkins+Plugins Version

on:
  push:
    branches: 
      - '*'
  schedule:
    - cron: "0 0 * * *"

jobs:
  jenkins-lts-custom:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git User Name
        run: |
          git config user.name "JenkinsUpdater[bot]"
          git config user.email "132197+jenkinsupdater[bot]@users.noreply.github.com"

      - name: Setup build machine
        id: setupBuildMachine
        run: pip3 install yq
        # important to install from pip3, since preinstalled
        # is another implementation of yq that is incompatible.

      - name: Analyse Jenkins Helm chart versions (actual and latest from internet)
        id: findLatestHelm
        run: |
          # get latest version from helm chart repository
          helmchartjson=$(curl https://charts.jenkins.io/index.yaml 2>/dev/null |
            yq '.entries.jenkins | max_by(.version | split("."))'
            )
          helmver=$(jq -r '.version' - <<<$helmchartjson)
          helmurl=$(jq -r '.urls[0]' - <<<$helmchartjson)
            # as described in https://github.com/helm/helm/issues/7314 only first value of urls

          # get current version from our source code
          if [ -f charts/jenkins/Chart.yaml ] ; then
            helmactver=$(yq -r '.version' charts/jenkins/Chart.yaml)
          else
            helmactver="0.0.0"
          fi

          echo "::set-output name=helmver::$helmver" &&
          echo "::set-output name=helmurl::$helmurl" &&
          echo "::set-output name=helmactver::$helmactver" &&

          echo "::notice::Found jenkins chart $helmactver locally, $helmver in Internet at $helmurl"

      - name: Update to latest Helm Chart, applying our patches on top
        id: updateHelm
        if: ${{ steps.findLatestHelm.outputs.helmver != steps.findLatestHelm.outputs.helmactver }}
        run : |
          [ -d charts/jenkins-lts-custom ] && rm -rf charts/jenkins-lts-custom
          # do NOT check RC here!
          mkdir -p charts &&
          curl -L ${{ steps.findLatestHelm.outputs.helmurl}} 2>/dev/null |
            tar xz -C charts &&
          mv charts/jenkins charts/jenkins-lts-custom &&

          origimage=$( \
            helm template -g charts/jenkins-lts-custom \
            | yq -r '.
              | select( .kind == "StatefulSet" )
              | .spec.template.spec.containers[]
              | select( .name == "jenkins" )
              | .image '
            ) &&
          echo "origimage=$origimage"
          sed -i "s|FROM .*|FROM $origimage|" Dockerfile &&

          ./.github/workflows/autoupdate.sh &&

          git add charts/jenkins-lts-custom Dockerfile &&
          git commit -m "Bump to Jenkins Helm chart ${{ steps.findLatestHelm.outputs.helmver}}" &&

          helmver="${{ steps.findLatestHelm.outputs.helmver }}" &&
          echo "::notice::Updated to jenkins chart $helmver based on image $origimage"

      - name: Generate Plugins Versions List plugins.txt from plugins-request.txt
        run: |
          set -eo pipefail &&
          IMG=$(sed -n "s|FROM \(.*\)|\1|p" <Dockerfile) &&

          docker run \
            -v $(pwd)/plugins-request.txt:/plugins-request.txt \
            "$IMG" \
            jenkins-plugin-cli --no-download --list -f /plugins-request.txt \
            | sed -e '1,/Resulting plugin list:/d' -e '$d' -e 's/ /:/' \
            >plugins.txt &&
          true || exit 1

          if [[ $(git diff --stat) != '' ]] ; then
            git add plugins.txt &&
            git commit -m "Update Plugins" &&
            echo "::notice::Updated Plugins"
          else
            echo "::notice::No plugins to update"
          fi

      - name: Prepare Release
        run: echo "to be implement"
        # ??? how to identify if to increase version or not???
          # read version from Chart.yaml.
          # if tag with that name does NOT exist
          #   --> use tag as is
          # else
          #   --> increase tag
        # update version in chart (Chart.yaml and values.yaml)
        # tag version
        #
        # after push make sure to trigger the tag / release action
        # that should build the image, push it and push the chart

      - name: Git Push
        run: |
          if [[ $(git diff ${{ github.sha }} --stat) != '' ]] ; then
            echo "would execute git push"
            echo "::notice::Pushed updates to github repo"
          else
            echo "::notice::No updates to push"
          fi
        # remember to trigger the tag / release action
        # as described above


      # the remaining actions should be moved to tag / release action
      - name: Check if Build necessary
        id: ifbuild
        run: |
          if \
              [ "${{ steps.diff-plugins.outputs.changed }}" != 'true' ] &&
              [ "${{ steps.getImageNameTags.outputs.changed }}" != 'true' ] &&
              [ "${{Â github.event_name }}" != "push" ] ; then
            echo "nothing changed -> skip build"
            echo "::set-output name=build::false"
          elif [ "${{ github.ref }}" == 'refs/heads/main' ] ; then
            echo "Building on main branch -> push with version+date"
            VERTAG="r"
            VERTAG+="$(git rev-list --count HEAD)"
            VERTAG+="."
            VERTAG+="$(git rev-parse --short HEAD)"
            echo "::set-output name=build::true"
            echo "::set-output name=tags::$VERTAG-$(date '+%Y%m%d%H%M')"
            echo "::set-output name=latest::true"
          elif [ "${GITHUB_REF#refs/heads/}" != "$GITHUB_REF" ] ; then
            echo "Building on non-main branch -> push with branchname"
            VERTAG="${GITHUB_REF#refs/heads/}"
            echo "::set-output name=build::true"
            echo "::set-output name=tags::$VERTAG"
            echo "::set-output name=latest::false"
          else
            echo "not building on a branch -> dont push"
            echo "::set-output name=build::true"
            echo "::set-output name=tags::"
            echo "::set-output name=latest::false"
          fi

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        if: ${{ steps.ifbuild.outputs.build == 'true' }}
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: |
            latest=${{ steps.ifbuild.outputs.latest }}
            prefix=
            suffix=-${{ steps.defineJenkinsTag.outputs.suffix }}
          tags: |
            ${{ steps.ifbuild.outputs.tags }}

      - name: Log into registry ghcr.io
        if: ${{ steps.ifbuild.outputs.build == 'true' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        if: ${{ steps.ifbuild.outputs.build == 'true' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
